!function(e,t){"object"===typeof exports&&"object"===typeof module?module.exports=t(require("vue")):"function"===typeof define&&define.amd?define("$validator",["vue"],t):"object"===typeof exports?exports.$validator=t(require("vue")):e.$validator=t(e.Vue)}("undefined"!==typeof self?self:this,(function(e){return function(){"use strict";var t={895:function(t){t.exports=e}},i={};function s(e){var a=i[e];if(void 0!==a)return a.exports;var n=i[e]={exports:{}};return t[e](n,n.exports,s),n.exports}s.d=function(e,t){for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return function(){s.r(a),s.d(a,{default:function(){return u},install:function(){return d},useValidator:function(){return c}});var e=s(895);const t=/(?:^\[object\s(.*?)\]$)/;var i=e=>Object.prototype.toString.call(e).replace(t,"$1").toLowerCase();const n={required:{validate:e=>e&&e.length>0,message:"%s is required"}};let o={};function l(e,t){console.warn("[$validator]","The '".concat(e,"' has been deprecated. Use the '").concat(t,"' instead"))}class r{constructor(){const t=(0,e.getCurrentInstance)();this.instance=t,this.validations={},this.customValidations={}}validate(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const{setupState:s,data:a}=this.instance;let n={valid:!0,validFields:[],invalidFields:[],messages:[],message:"",validMsg:{}};this.validations=Object.keys(this.customValidations).length?this.customValidations:s.validations||a.validations||{};let l=Object.keys(this.validations);t.length&&(l=l.filter((e=>t.includes(e))));for(let r=0,d=l.length;r<d;r++){let t=l[r],s=this.validations[t],a=s.label||t,d=s.validator.split(",").map((e=>e.trim())),c=!0;for(let l=0,r=d.length;l<r;l++){let r=d[l],u=s[r]||o[r];if(u&&"function"===i(u.validate)){let s=[e[t],e];if(!u.validate.apply(this.instance.$data,s)){c=!1;let e="";switch(i(u.message)){case"string":e=u.message.replace("%s",a);break;case"function":e=u.message.apply(this.instance.$data,s);break;default:console.warn("[$validator]","'".concat(t,".message' must be a string or function"))}e&&n.messages.push(e);break}}else console.warn("[$validator]","The field '".concat(t,"' is missing a validation rule: '").concat(r,"'"))}c?n.validFields.push(t):n.invalidFields.push(t)}return n.messages.length&&(n.valid=!1,n.message=n.messages[0],n.invalidFields.forEach(((e,t)=>{n.validMsg[e]=n.messages[t]}))),n.validFields.forEach((e=>{n.validMsg[e]=""})),n}resetValidations(){l("resetValidations","clear")}setValidations(){l("setValidations","set")}clear(){this.customValidations={}}get(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e?this.customValidations[e]:this.customValidations}set(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"object"===i(e)?this.customValidations=Object.assign({},e):this.customValidations[e]=t}}function d(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o=Object.assign({},n,t)}const c=()=>new r;var u={install:d}}(),a}()}));